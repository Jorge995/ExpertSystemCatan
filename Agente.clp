; Definicion de las clases utilizadas

(defclass human (is-a USER)
        (slot id (type SYMBOL))
        (slot clay (type INTEGER) (default 0))
        (slot ore (type INTEGER) (default 0))
        (slot sheep (type INTEGER) (default 0))
        (slot wheat (type INTEGER) (default 0))
        (slot wood (type INTEGER) (default 0))
        (slot nresources (type INTEGER) (default 0))
        (slot used_knights (type INTEGER) (default 0))
        (slot used_roads (type INTEGER) (default 0)) 
        (slot used_settlements (type INTEGER) (default 0))
        (slot used_cities (type INTEGER) (default 0))
        (slot points (type INTEGER) (default 0))
        (slot turn (type SYMBOL) (allowed-values yes no) (default no))
        (slot buildSettlementPosible (type SYMBOL) (allowed-values yes no) (default yes))
        (slot prob_sheep (type INTEGER) (default 0))
        (slot prob_clay (type INTEGER) (default 0))
        (slot prob_ore (type INTEGER) (default 0))
        (slot prob_wood (type INTEGER) (default 0))
        (slot prob_wheat (type INTEGER) (default 0))
        (slot objective (type SYMBOL) (allowed-values none buildRoad buildCity buildSettlement getCard) (default none))
        (slot need_clay (type SYMBOL) (allowed-values yes no) (default no))
        (slot need_wood (type SYMBOL) (allowed-values yes no) (default no))
        (slot need_wheat (type SYMBOL) (allowed-values yes no) (default no))
        (slot need_sheep (type SYMBOL) (allowed-values yes no) (default no))
        (slot need_ore (type SYMBOL) (allowed-values yes no) (default no))
              
)

(defclass enemy (is-a USER)
        (slot id (type SYMBOL))
        (slot points (type INTEGER) (default 0))
)

(defclass offer (is-a USER)
    (slot fromPlayer (type SYMBOL))
    (multislot toPlayer (type SYMBOL))
    (slot getClay (type INTEGER) (default 0))
    (slot getWood (type INTEGER) (default 0))
    (slot getWheat (type INTEGER) (default 0))
    (slot getSheep (type INTEGER) (default 0))
    (slot getOre (type INTEGER) (default 0))
    (slot giveClay (type INTEGER) (default 0))
    (slot giveWood (type INTEGER) (default 0))
    (slot giveWheat (type INTEGER) (default 0))
    (slot giveSheep (type INTEGER) (default 0))
    (slot giveOre (type INTEGER) (default 0))
)

(defclass terrain (is-a USER)
        (slot id (type INTEGER))
        (slot number (type INTEGER))
        (slot resource (type SYMBOL) (allowed-values clay ore sheep wheat wood water desert))
)

(defclass vertex (is-a USER)
        (slot id (type INTEGER))
        (slot terrain1 (type INTEGER))
        (slot terrain2 (type INTEGER))
        (slot terrain3 (type INTEGER))
)

(defclass settlement (is-a USER)
        (slot vertex (type INTEGER))
)

(defclass city (is-a USER)
        (slot vertex (type INTEGER))
)

(defclass road (is-a USER)
        (slot vertexFrom (type INTEGER))
        (slot vertexTo (type INTEGER))
)

(deftemplate advice 
        (slot message (type STRING))
)

;Definicion de instacias para las pruebas

; (definstances terrains
;         (of terrain (id 51) (number 6) (resource sheep))
; (of terrain (id 53) (number 2) (resource wood))
; (of terrain (id 55) (number 5) (resource sheep))
; (of terrain (id 83) (number 3) (resource wood))
; (of terrain (id 85) (number 4) (resource sheep))
; (of terrain (id 87) (number 9) (resource wheat))
; (of terrain (id 89) (number 10) (resource ore))
; (of terrain (id 115) (number 8) (resource wheat))
; (of terrain (id 117) (number 0) (resource desert))
; (of terrain (id 119) (number 11) (resource clay))
; (of terrain (id 121) (number 3) (resource sheep))
; (of terrain (id 123) (number 8) (resource ore))
; (of terrain (id 149) (number 10) (resource wood))
; (of terrain (id 151) (number 5) (resource clay))
; (of terrain (id 153) (number 6) (resource clay))
; (of terrain (id 155) (number 4) (resource ore))
; (of terrain (id 183) (number 9) (resource wood))
; (of terrain (id 185) (number 12) (resource wheat))
; (of terrain (id 187) (number 11) (resource wheat))
; )

; (definstances vertex 
;         (of vertex (id 131) (terrain1 115) (terrain2 147) (terrain3 113))
; (of vertex (id 133) (terrain1 117) (terrain2 149) (terrain3 115))
; (of vertex (id 135) (terrain1 119) (terrain2 151) (terrain3 117))
; (of vertex (id 137) (terrain1 121) (terrain2 153) (terrain3 119))
; (of vertex (id 139) (terrain1 123) (terrain2 155) (terrain3 121))
; (of vertex (id 141) (terrain1 125) (terrain2 157) (terrain3 123))
; (of vertex (id 148) (terrain1 115) (terrain2 149) (terrain3 147))
; (of vertex (id 150) (terrain1 117) (terrain2 151) (terrain3 149))
; (of vertex (id 152) (terrain1 119) (terrain2 153) (terrain3 151))
; (of vertex (id 154) (terrain1 121) (terrain2 155) (terrain3 153))
; (of vertex (id 156) (terrain1 123) (terrain2 157) (terrain3 155))
; (of vertex (id 35) (terrain1 19) (terrain2 51) (terrain3 17))
; (of vertex (id 37) (terrain1 21) (terrain2 53) (terrain3 19))
; (of vertex (id 165) (terrain1 149) (terrain2 181) (terrain3 147))
; (of vertex (id 39) (terrain1 23) (terrain2 55) (terrain3 21))
; (of vertex (id 167) (terrain1 151) (terrain2 183) (terrain3 149))
; (of vertex (id 169) (terrain1 153) (terrain2 185) (terrain3 151))
; (of vertex (id 171) (terrain1 155) (terrain2 187) (terrain3 153))
; (of vertex (id 173) (terrain1 157) (terrain2 189) (terrain3 155))
; (of vertex (id 50) (terrain1 17) (terrain2 51) (terrain3 49))
; (of vertex (id 52) (terrain1 19) (terrain2 53) (terrain3 51))
; (of vertex (id 54) (terrain1 21) (terrain2 55) (terrain3 53))
; (of vertex (id 182) (terrain1 149) (terrain2 183) (terrain3 181))
; (of vertex (id 56) (terrain1 23) (terrain2 57) (terrain3 55))
; (of vertex (id 184) (terrain1 151) (terrain2 185) (terrain3 183))
; (of vertex (id 186) (terrain1 153) (terrain2 187) (terrain3 185))
; (of vertex (id 188) (terrain1 155) (terrain2 189) (terrain3 187))
; (of vertex (id 67) (terrain1 51) (terrain2 83) (terrain3 49))
; (of vertex (id 69) (terrain1 53) (terrain2 85) (terrain3 51))
; (of vertex (id 71) (terrain1 55) (terrain2 87) (terrain3 53))
; (of vertex (id 199) (terrain1 183) (terrain2 215) (terrain3 181))
; (of vertex (id 73) (terrain1 57) (terrain2 89) (terrain3 55))
; (of vertex (id 201) (terrain1 185) (terrain2 217) (terrain3 183))
; (of vertex (id 203) (terrain1 187) (terrain2 219) (terrain3 185))
; (of vertex (id 205) (terrain1 189) (terrain2 221) (terrain3 187))
; (of vertex (id 82) (terrain1 49) (terrain2 83) (terrain3 81))
; (of vertex (id 84) (terrain1 51) (terrain2 85) (terrain3 83))
; (of vertex (id 86) (terrain1 53) (terrain2 87) (terrain3 85))
; (of vertex (id 88) (terrain1 55) (terrain2 89) (terrain3 87))
; (of vertex (id 216) (terrain1 183) (terrain2 217) (terrain3 215))
; (of vertex (id 90) (terrain1 57) (terrain2 91) (terrain3 89))
; (of vertex (id 218) (terrain1 185) (terrain2 219) (terrain3 217))
; (of vertex (id 220) (terrain1 187) (terrain2 221) (terrain3 219))
; (of vertex (id 99) (terrain1 83) (terrain2 115) (terrain3 81))
; (of vertex (id 101) (terrain1 85) (terrain2 117) (terrain3 83))
; (of vertex (id 103) (terrain1 87) (terrain2 119) (terrain3 85))
; (of vertex (id 105) (terrain1 89) (terrain2 121) (terrain3 87))
; (of vertex (id 107) (terrain1 91) (terrain2 123) (terrain3 89))
; (of vertex (id 114) (terrain1 81) (terrain2 115) (terrain3 113))
; (of vertex (id 116) (terrain1 83) (terrain2 117) (terrain3 115))
; (of vertex (id 118) (terrain1 85) (terrain2 119) (terrain3 117))
; (of vertex (id 120) (terrain1 87) (terrain2 121) (terrain3 119))
; (of vertex (id 122) (terrain1 89) (terrain2 123) (terrain3 121))
; (of vertex (id 124) (terrain1 91) (terrain2 125) (terrain3 123))   
; )

; ; (definstances ports 
; ;         (of port31 (vertex 29))
; ;         (of port31 (vertex 0))
; ;         (of port31 (vertex 6))
; ;         (of port31 (vertex 7))
; ;         (of port31 (vertex 16))
; ;         (of port31 (vertex 17))
; ;         (of port31 (vertex 26))
; ;         (of port31 (vertex 27))

; ;         (of portresource (vertex 2) (resource sheep))
; ;         (of portresource (vertex 3) (resource sheep))
; ;         (of portresource (vertex 9) (resource clay))
; ;         (of portresource (vertex 10) (resource clay))
; ;         (of portresource (vertex 12) (resource ore))
; ;         (of portresource (vertex 13) (resource ore))
; ;         (of portresource (vertex 19) (resource wood))
; ;         (of portresource (vertex 20) (resource wood))
; ;         (of portresource (vertex 22) (resource wheat))
; ;         (of portresource (vertex 23) (resource wheat))
; ; )

; (definstances players
;         (of human (id 0)(clay 0)(ore 3)(sheep 4)(wheat 0)(wood 0)(nresources 7)(used_knights 0)(used_roads 4)(used_settlements 2)(used_cities 0)(points 2)(turn yes)(buildSettlementPosible no)(objective buildRoad))
; (of enemy (id 1)(points 2))
; (of enemy (id 2)(points 2))
; (of enemy (id 3)(points 7))
        
; )

; (definstances player_constructions
;         (of settlement (vertex 154))
; (of settlement (vertex 184))
; (of road (vertexFrom 169)(vertexTo 184))
; (of road (vertexFrom 154)(vertexTo 171))
; (of road (vertexFrom 171)(vertexTo 188))
; (of road (vertexFrom 188)(vertexTo 205))
; )

; (definstances offer
;         (of offer (fromPlayer 3) (toPlayer 0) (getClay 0) (getOre 0) (getSheep 1) (getWheat 0) (getWood 0) (giveClay 2) (giveOre 0) (giveSheep 0) (giveWheat 0) (giveWood 0))
; )

; Hechos iniciales de probabilidad

(deffacts probabilities
        (probability 2 0.0277)
        (probability 3 0.0555)
        (probability 4 0.0833)
        (probability 5 0.1111)
        (probability 6 0.1388)
        (probability 7 0.1666)
        (probability 8 0.1388)
        (probability 9 0.1111)
        (probability 10 0.0833)
        (probability 11 0.0555)
        (probability 12 0.0277)  
)

; Deficinion de las reglas

(defrule prob_sheep
        (declare (salience 10))
        (object (is-a settlement) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_sheep ?x))
        (not (check ?terrain))
        (test (and (eq ?resource sheep) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_sheep (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_wood
        (declare (salience 10))
        (object (is-a settlement) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_wood ?x))
        (not (check ?terrain))
        (test (and (eq ?resource wood) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_wood (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_wheat
        (declare (salience 10))
        (object (is-a settlement) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_wheat ?x))
        (not (check ?terrain))
        (test (and (eq ?resource wheat) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_wheat (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_clay
        (declare (salience 10))
        (object (is-a settlement) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_clay ?x))
        (not (check ?terrain))
        (test (and (eq ?resource clay) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_clay (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_ore
        (declare (salience 10))
        (object (is-a settlement) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_ore ?x))
        (not (check ?terrain))
        (test (and (eq ?resource ore) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_ore (+ ?x ?prob)))
        (assert (check ?terrain))
)

(defrule prob_sheep2
        (declare (salience 10))
        (object (is-a city) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_sheep ?x))
        (not (check ?terrain))
        (test (and (eq ?resource sheep) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_sheep (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_wood2
        (declare (salience 10))
        (object (is-a city) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_wood ?x))
        (not (check ?terrain))
        (test (and (eq ?resource wood) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_wood (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_wheat2
        (declare (salience 10))
        (object (is-a city) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_wheat ?x))
        (not (check ?terrain))
        (test (and (eq ?resource wheat) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_wheat (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_clay2
        (declare (salience 10))
        (object (is-a city) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_clay ?x))
        (not (check ?terrain))
        (test (and (eq ?resource clay) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_clay (+ ?x ?prob)))
        (assert (check ?terrain))
)


(defrule prob_ore2
        (declare (salience 10))
        (object (is-a city) (vertex ?vertex))
        (object (is-a vertex) (id ?vertex) (terrain1 ?terrain1) (terrain2 ?terrain2) (terrain3 ?terrain3))
        (object (is-a terrain) (id ?terrain) (number ?number) (resource ?resource))
        (probability ?number ?prob)
        ?h <- (object (is-a human) (prob_ore ?x))
        (not (check ?terrain))
        (test (and (eq ?resource ore) (or (eq ?terrain ?terrain1) (eq ?terrain ?terrain2) (eq ?terrain ?terrain3))))
        =>
        (modify-instance ?h (prob_ore (+ ?x ?prob)))
        (assert (check ?terrain))
)

(defrule buildRoad
        (declare (salience 5))
        ?h <- (object (is-a human) (used_roads ?n) (wood ?w) (clay ?c) (objective buildRoad) (turn ?t) (need_clay no) (need_wood no))
        =>
        (if (and (eq ?t yes) (= ?n 15))
                then (printout t "You can not build more roads" crlf)
                else
                (modify-instance ?h (need_clay yes) (need_wood yes))
                (if (and (eq ?t yes) (not (or (< ?w 1) (< ?c 1))))
                        then
                        (printout t "You can build a road now" crlf)
                )
        )
)

(defrule buildSettlement
        (declare (salience 5))
        ?h <- (object (is-a human) (used_settlements ?n) (wood ?w) (clay ?c) (wheat ?wh) (sheep ?s) (objective buildSettlement) (turn ?t) (need_clay no) (need_wood no) (need_sheep no) (need_wheat no))
        =>
        (if (and (eq ?t yes) (= ?n 5))
                then (printout t "You can not build more settlements" crlf)
                else
                (modify-instance ?h (need_clay yes) (need_wood yes) (need_sheep yes) (need_wheat yes))
                (if (and (eq ?t yes) (not (or (< ?w 1) (< ?c 1) (< ?wh 1) (< ?s 1))))
                        then 
                        (printout t "You can build a settlement now" crlf)
                )      
        )
)

(defrule buildCity
        (declare (salience 5))
        ?h <- (object (is-a human) (used_cities ?n) (wheat ?wh) (ore ?o) (objective buildCity) (turn ?t) (need_wheat no) (need_ore no))
        =>
        (if (and (eq ?t yes) (= ?n 4))
                then (printout t "You can not build more cities" crlf)
                else
                (modify-instance ?h (need_wheat yes) (need_ore yes))
                (if (and (eq ?t yes) (not (or (< ?wh 2) (< ?o 3))))
                        then
                        (printout t "You can build a city now" crlf)
                )
        )
)

(defrule getCard
        (declare (salience 5))
        ?h <- (object (is-a human) (wheat ?wh) (sheep ?s) (ore ?o) (objective getCard) (turn ?t) (need_wheat no) (need_sheep no) (need_ore no))
        =>
        (modify-instance ?h (need_wheat yes) (need_sheep yes) (need_ore yes))
        (if (and (eq ?t yes) (not (or (< ?wh 1) (< ?s 1) (< ?o 1))))
                then
                (printout t "You can get a card now" crlf)
        )
)

(defrule priorityClay
        (declare (salience 4))
        ?h <- (object (is-a human) (clay ?c) (need_clay ?n) (prob_clay ?pr))
        =>
        (if (eq ?n yes)
                then
                (if (= ?c 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityClay 5))
                                else (assert (priorityClay 4))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityClay 4))
                                else (assert (priorityClay 3))
                        )
                )
                else
                (if (= ?c 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityClay 2))
                                else (assert (priorityClay 1))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityClay 0))
                                else (assert (priorityClay 0))
                        )
                )
        )
)

(defrule priorityWood
        (declare (salience 4))
        ?h <- (object (is-a human) (wood ?w) (need_wood ?n) (prob_wood ?pr))
        =>
        (if (eq ?n yes)
                then
                (if (= ?w 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityWood 5))
                                else (assert (priorityWood 4))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityWood 4))
                                else (assert (priorityWood 3))
                        )
                )
                else
                (if (= ?w 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityWood 2))
                                else (assert (priorityWood 1))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityWood 0))
                                else (assert (priorityWood 0))
                        )
                )
        )
)

(defrule priorityWheat
        (declare (salience 4))
        ?h <- (object (is-a human) (wheat ?wh) (need_wheat ?n) (prob_wheat ?pr))
        =>
        (if (eq ?n yes)
                then
                (if (= ?wh 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityWheat 5))
                                else (assert (priorityWheat 4))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityWheat 4))
                                else (assert (priorityWheat 3))
                        )
                )
                else
                (if (= ?wh 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityWheat 2))
                                else (assert (priorityWheat 1))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityWheat 0))
                                else (assert (priorityWheat 0))
                        )
                )
        )
)

(defrule prioritySheep
        (declare (salience 4))
        ?h <- (object (is-a human) (sheep ?s) (need_sheep ?n) (prob_sheep ?pr))
        =>
        (if (eq ?n yes)
                then
                (if (= ?s 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (prioritySheep 5))
                                else (assert (prioritySheep 4))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (prioritySheep 4))
                                else (assert (prioritySheep 3))
                        )
                )
                else
                (if (= ?s 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (prioritySheep 2))
                                else (assert (prioritySheep 1))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (prioritySheep 0))
                                else (assert (prioritySheep 0))
                        )
                )
        )
)

(defrule priorityOre
        (declare (salience 4))
        ?h <- (object (is-a human) (ore ?o) (need_ore ?n) (prob_ore ?pr))
        =>
        (if (eq ?n yes)
                then
                (if (= ?o 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityOre 5))
                                else (assert (priorityOre 4))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityOre 4))
                                else (assert (priorityOre 3))
                        )
                )
                else
                (if (= ?o 0)
                        then
                        (if (< ?pr 0.2)
                                then (assert (priorityOre 2))
                                else (assert (priorityOre 1))
                        )
                        else
                        (if (< ?pr 0.2)
                                then (assert (priorityOre 0))
                                else (assert (priorityOre 0))
                        )
                )
        )
)

(deffunction toAlly (?p ?id)
        (foreach ?p1 ?p
                (if (eq ?p1 ?id)
                        then (return TRUE)
                )
        )
        (return FALSE)
)

(deffunction checkPlayerCanAccept (?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)
        (if (and (>= ?c ?getc) (>= ?w ?getw) (>= ?wh ?getwh) (>= ?s ?gets) (>= ?o ?geto))
                then (return TRUE)
                else (return FALSE)
        )
)

(defrule checkEnemyOfferToAlly
        (declare (salience 3))
        (object (is-a enemy) (id ?player1))
        (object (is-a offer) (fromPlayer ?player1) (toPlayer $?toplayers))
        (object (is-a human) (id ?id))
        (test (and (not (eq ?player1 ?id)) (toAlly $?toplayers ?id)))
        =>
        (assert (toAlly))    
)

(defrule checkPriority
        ?a <- (toAlly)
        (object (is-a enemy) (id ?player1))
        (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto) (giveClay ?givec) (giveWood ?givew) (giveWheat ?givewh) (giveSheep ?gives) (giveOre ?giveo))
        (priorityClay ?prc)
        (priorityWood ?prw)
        (priorityWheat ?prwh)
        (prioritySheep ?prs)
        (priorityOre ?pro)
        =>
        (bind ?prio 0)
        (if (and (> ?getc 0) (> ?prc ?prio))
                then (bind ?prio ?prc)
        )

        (if (and (> ?getw 0) (> ?prw ?prio))
                then (bind ?prio ?prw)
        )

        (if (and (> ?getwh 0) (> ?prwh ?prio))
                then (bind ?prio ?prwh)
        )

        (if (and (> ?gets 0) (> ?prs ?prio))
                then (bind ?prio ?prs)
        )

        (if (and (> ?geto 0) (> ?pro ?prio))
                then (bind ?prio ?pro)
        )

        (bind ?prio2 0)
        (if (and (> ?givec 0) (> ?prc ?prio2))
                then (bind ?prio2 ?prc)
        )

        (if (and (> ?givew 0) (> ?prw ?prio2))
                then (bind ?prio2 ?prw)
        )

        (if (and (> ?givewh 0) (> ?prwh ?prio2))
                then (bind ?prio2 ?prwh)
        )

        (if (and (> ?gives 0) (> ?prs ?prio2))
                then (bind ?prio2 ?prs)
        )

        (if (and (> ?giveo 0) (> ?pro ?prio2))
                then (bind ?prio2 ?pro)
        )

        (assert (priorityGiveOffer ?prio))
        (assert (priorityGetOffer ?prio2))
        (retract ?a)
)

(defrule checkNResources
        (priorityGetOffer ?)
        (priorityGiveOffer ?)
        (object (is-a enemy) (id ?player1))
        (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto) (giveClay ?givec) (giveWood ?givew) (giveWheat ?givewh) (giveSheep ?gives) (giveOre ?giveo))
        (object (is-a human) (nresources ?n))
        =>
        (bind ?uget (- (+ ?givec ?givew ?givewh ?gives ?giveo) (+ ?getc ?getw ?getwh ?gets ?geto)))
        (assert (uendwith (+ ?n ?uget)))
        (assert (buildCityPosible no))
)

(defrule buildCityPosible
        (declare (salience 10))
        ?b <- (buildCityPosible no)
        (uendwith ?)
        (object (is-a settlement))
        (object (is-a human) (used_cities ?uc))
        (test (< ?uc 4))
        =>
        (retract ?b)
        (assert (buildCityPosible yes))
)

(defrule checkUCanBuy
        (declare (salience 5))
        (buildCityPosible ?b)
        (object (is-a offer) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto) (giveClay ?givec) (giveWood ?givew) (giveWheat ?givewh) (giveSheep ?gives) (giveOre ?giveo))
        (object (is-a human) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o) (buildSettlementPosible ?b2) (used_settlements ?us) (used_roads ?ur))
        =>
        (if (and (< ?ur 15)(>= (- (+ ?c ?givec) ?getc) 1) (>= (- (+ ?w ?givew) ?getw) 1))
                then (assert (ucanbuy yes))
                else
                (if (and (< ?us 5)(eq ?b2 yes) (and (>= (- (+ ?c ?givec) ?getc) 1) (>= (- (+ ?w ?givew) ?getw) 1) (>= (- (+ ?wh ?givewh) ?getwh) 1) (>= (- (+ ?s ?gives) ?gets) 1)))
                        then (assert (ucanbuy yes))
                        else
                        (if (and (eq ?b yes) (and (>= (- (+ ?wh ?givewh) ?getwh) 2) (>= (- (+ ?o ?giveo) ?geto) 3)))
                                then (assert (ucanbuy yes))
                                else
                                (if (and (>= (- (+ ?o ?giveo) ?geto) 1) (>= (- (+ ?wh ?givewh) ?getwh) 1) (>= (- (+ ?s ?gives) ?gets) 1))
                                        then (assert (ucanbuy yes))
                                        else
                                        (assert (ucanbuy no))
                                )
                        )
                )
        )           
)

(defrule acceptOffer1
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (< ?priogive 3) (eq ?t yes) (< ?poi 7) (eq ?buy yes) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias aceptar la oferta ya que los recursos te interesan y puedes comprar en tu turno")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer2
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (< ?priogive 3) (<= ?u 7) (eq ?t no) (< ?poi 7) (eq ?buy yes) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias aceptar la oferta ya que los recursos te interesan, te quedas con menos de 8 recursos y cuando llegue tu turno puedes comprar")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer3
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (< ?priogive 3) (<= ?u 7) (eq ?t no) (< ?poi 7) (eq ?buy no) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias aceptar la oferta ya que los recursos te interesan y te quedas con menos de 8 recursos")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer4
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (< ?priogive 3) (<= ?u 7) (eq ?t yes) (< ?poi 7) (eq ?buy no) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias aceptar la oferta ya que los recursos te interesan y te quedas con menos de 8 recursos en tu turno")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer5
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 4) (< ?priogive 3) (eq ?t yes) (>= ?poi 7) (eq ?buy yes) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias aceptar la oferta ya que, a pesar de que el jugador enemigo lleva 7 o mas puntos, los recursos que ofrece son muy prioritarios y puedes usarlos ya que es tu turno.")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer6
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 4) (< ?priogive 3) (<= ?u 7) (eq ?t no) (>= ?poi 7) (eq ?buy yes) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
       (assert (advice (message "Deberias aceptar la oferta ya que, a pesar de que el jugador enemigo lleva 7 o mas puntos, los recursos que ofrece son muy prioritarios y en tu turno puedes usarlos")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer7
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 4) (< ?priogive 3) (<= ?u 7) (eq ?t no) (>= ?poi 7) (eq ?buy no) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberías aceptar la oferta ya que, a pesar de que el jugador enemigo lleva 7 o mas puntos, los recursos que ofrece son muy prioritarios y te quedas con menos de 8 recursos")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule acceptOffer8
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 4) (< ?priogive 3) (<= ?u 7) (eq ?t yes) (>= ?poi 7) (eq ?buy no) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberías aceptar la oferta ya que, a pesar de que el jugador enemigo lleva 7 o mas puntos, los recursos que ofrece son muy prioritarios y, a pesar de no poder gastarlos ahora, te quedas con menos de 8 recursos")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule declineOffer1
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test  (< ?prioget 3))
        =>
        (assert (advice (message "Deberias rechazar la oferta ya que no te interesan los recursos que ofrece ahora mismo")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule declineOffer2
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (> ?u 7) (eq ?t no) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias rechazar la oferta ya que acabas con mas de 7 recursos y te arriesgas a perder mas de lo que ganas")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
        (unmake-instance ?of)
)

(defrule declineOffer3
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (> ?u 7) (eq ?t yes) (eq ?buy no) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias rechazar la oferta ya que acabas con mas de 7 recursos y no puedes gastarlos ahora mismo")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule declineOffer4
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (< ?prioget 4) (>= ?poi 7) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias rechazar la oferta ya que el contrincante tiene 7 o mas puntos y los recursos que ofrece no son prioritarios")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule declineOffer5
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 4) (>= ?priogive 3) (>= ?poi 7) (checkPlayerCanAccept ?c ?w ?wh ?s ?o ?getc ?getw ?getwh ?gets ?geto)))
        =>
        (assert (advice (message "Deberias rechazar la oferta ya que el contrincante tiene 7 o mas puntos a pesar de que la oferta es buena pero lo que pide a cambio tambien")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
         (unmake-instance ?of)
)

(defrule contraOffer1
        ?prioge <- (priorityGetOffer ?prioget)
        ?priogiv <- (priorityGiveOffer ?priogive)
        ?canbuy <- (ucanbuy ?buy)
        ?buildPos <- (buildCityPosible ?)
        ?uend <- (uendwith ?u)
        ?prioclay <- (priorityClay ?)
        ?priowood <- (priorityWood ?)
        ?priowheat <- (priorityWheat ?)
        ?priosheep <- (prioritySheep ?)
        ?prioore <- (priorityOre ?)
        (object (is-a human) (turn ?t) (clay ?c) (wood ?w) (wheat ?wh) (sheep ?s) (ore ?o))
        (object (is-a enemy) (id ?player1) (points ?poi))
        ?of <- (object (is-a offer) (fromPlayer ?player1) (getClay ?getc) (getWood ?getw) (getWheat ?getwh) (getSheep ?gets) (getOre ?geto))
        (test (and (>= ?prioget 3) (>= ?priogive 3) (<= ?u 7) (eq ?t no) (< ?poi 7)))
        =>
        (assert (advice (message "Si puedes, deberias hacer una contraoferta ya que te interesa lo que ofrece pero lo que pide tambien te interesa")))
        (retract ?prioge)
        (retract ?priogiv)
        (retract ?canbuy)
        (retract ?buildPos)
        (retract ?uend)
        (retract ?prioclay)
        (retract ?priowood)
        (retract ?priowheat)
        (retract ?priosheep)
        (retract ?prioore)
        (unmake-instance ?of)
)


(defrule checkout
        (declare (salience 20))
        ?ch <- (check ?terrain)
        (advice (message ?mess))
        =>
        (retract ?ch)
)

(defrule end
        (declare (salience 20))
        (not (check ?terrain))
         (advice (message ?mess))
        =>
        (halt)
)



       


